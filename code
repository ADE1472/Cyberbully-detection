{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f12b3684",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ec166f46",
   "metadata": {},
   "source": [
    "## Import neccessary libries and stating there functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "69a306a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "997d1848",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import pandas as pd #for data structure and preprocessing\n",
    "import numpy as np #for dimentional arrarys and matrices\n",
    "import matplotlib.pyplot as plt #for dimentional plotting\n",
    "import seaborn as sns #for statistical model visualisation \n",
    "\n",
    "import re #regular expression: to check if a string matches\n",
    "import os #operating syetem interacting functions\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore') #unneccesarily alert of exceptions\n",
    "\n",
    "\n",
    "from collections import Counter #for counting hashable objects\n",
    "\n",
    "#for Natural Language toolkits(data cleansing)\n",
    "import nltk\n",
    "from nltk.corpus import stopwords \n",
    "from nltk.tokenize import word_tokenize #split sentence into word\n",
    "from nltk.stem import WordNetLemmatizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0846d1f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import tensorflow as tf #for numerical computations/experiments \n",
    "from tensorflow.keras import layers #for fast experimentations\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer #serialize dictionaries word count into plain JSON\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences #For transforming sequence list into a shape of 2D Numpy array\n",
    "from tensorflow.keras import regularizers #for penalties application on layer parameters during optimization \n",
    "from tensorflow.keras import preprocessing #to build native input processing pipelines\n",
    "from tensorflow.keras import losses #For computing the cross entropy loss between the true and the predicted labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "0881d86b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn #for classification and model selection\n",
    "from sklearn import preprocessing #For label encoder of the target varaible \n",
    "from sklearn.metrics import classification_report #for classification metrics summarization \n",
    "from sklearn.feature_extraction.text import CountVectorizer #For count of words and traverse dataset\n",
    "from sklearn.model_selection import train_test_split #For spliting the data to a train and test data\n",
    "from sklearn import svm\n",
    "from sklearn import metrics #implements several loss, score, and utility functions to measure classification performance\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import cross_val_score #For measuring the accuracy score of a model \n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from sklearn.metrics import roc_curve, roc_auc_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92134a74",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "40b3c093",
   "metadata": {},
   "source": [
    "## Load and Check dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5ceb540f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>id</th>\n",
       "      <th>Text</th>\n",
       "      <th>Annotation</th>\n",
       "      <th>oh_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1010</th>\n",
       "      <td>3.93477949275374E+017</td>\n",
       "      <td>3.93477949275374E+017</td>\n",
       "      <td>RT @LiamDangerSmith: Call me sexist, but I rea...</td>\n",
       "      <td>sexism</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8056</th>\n",
       "      <td>5.6336659764179E+017</td>\n",
       "      <td>5.6336659764179E+017</td>\n",
       "      <td>@semzyxx @owais00 Here's the trick. When she s...</td>\n",
       "      <td>sexism</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9400</th>\n",
       "      <td>5.70846153845002E+017</td>\n",
       "      <td>5.70846153845002E+017</td>\n",
       "      <td>@MetroidThief @deathofrats01 his face is a bit...</td>\n",
       "      <td>none</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3235</th>\n",
       "      <td>5.75957350940451E+017</td>\n",
       "      <td>5.75957350940451E+017</td>\n",
       "      <td>Who else feels Karma is going to come back and...</td>\n",
       "      <td>none</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9475</th>\n",
       "      <td>5.70994740797133E+017</td>\n",
       "      <td>5.70994740797133E+017</td>\n",
       "      <td>Sorry, I'm not going to say GamerGate is the s...</td>\n",
       "      <td>none</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      index                     id  \\\n",
       "1010  3.93477949275374E+017  3.93477949275374E+017   \n",
       "8056   5.6336659764179E+017   5.6336659764179E+017   \n",
       "9400  5.70846153845002E+017  5.70846153845002E+017   \n",
       "3235  5.75957350940451E+017  5.75957350940451E+017   \n",
       "9475  5.70994740797133E+017  5.70994740797133E+017   \n",
       "\n",
       "                                                   Text Annotation  oh_label  \n",
       "1010  RT @LiamDangerSmith: Call me sexist, but I rea...     sexism       1.0  \n",
       "8056  @semzyxx @owais00 Here's the trick. When she s...     sexism       1.0  \n",
       "9400  @MetroidThief @deathofrats01 his face is a bit...       none       0.0  \n",
       "3235  Who else feels Karma is going to come back and...       none       0.0  \n",
       "9475  Sorry, I'm not going to say GamerGate is the s...       none       0.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df= pd.read_csv(\"twitter_parsed_dataset.csv\") #Read data from my document\n",
    "\n",
    "df= df.sample(frac=1, random_state=1200) #randomize observation data \n",
    "\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "00fc820a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16851, 5)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape #Total number of rows and columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "07d11e4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>id</th>\n",
       "      <th>Text</th>\n",
       "      <th>Annotation</th>\n",
       "      <th>oh_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1010</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8056</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9400</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3235</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9475</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11797</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8882</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8704</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16103</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12883</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16851 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index     id   Text  Annotation  oh_label\n",
       "1010   False  False  False       False     False\n",
       "8056   False  False  False       False     False\n",
       "9400   False  False  False       False     False\n",
       "3235   False  False  False       False     False\n",
       "9475   False  False  False       False     False\n",
       "...      ...    ...    ...         ...       ...\n",
       "11797  False  False  False       False     False\n",
       "8882   False  False  False       False     False\n",
       "8704   False  False  False       False     False\n",
       "16103  False  False  False       False     False\n",
       "12883  False  False  False       False     False\n",
       "\n",
       "[16851 rows x 5 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull() #Check for missing value "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "80eec3ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31.73 % are bullying text\n",
      "68.25 % are non-bullying text\n"
     ]
    }
   ],
   "source": [
    "#Get the % of Bullying and non-Bullying in the dataset\n",
    "\n",
    "df_bullying= np.round(df['oh_label'].value_counts()[1.0]/len(df) *100, 2)\n",
    "df_non_bullying= np.round(df['oh_label'].value_counts()[0.0]/len(df)*100,2)\n",
    "\n",
    "print(df_bullying, \"% are bullying text\")\n",
    "print (df_non_bullying, \"% are non-bullying text\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e0240134",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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sBIXsloUskSkvxS8RKRfvG7K4biuyjG4iVx3AapwLWTpoawrmMVx3Zdx75bwbgN5ICrytl2Udkv/OT1YdU0824gLVY24sz6bgI110WifTjwQEemJgpeIDLjaUCjAllDWNR6qEhfQRmUsL2fLNAv9PSCZtFtXq1s70Iobf9WK6yJciwtVXTe1XolIVil4iYivvJazElxXXylbh6iebincZZI6vH9juni0iOQyBS8RERGRLAn4XYCIiIhIoVDwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLFHwEhEREckSBS8RERGRLPn/q6Bh/sf7ACsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# VISUALIZING: Pie chart plot of the label\n",
    "plt.figure(figsize = (8,8))\n",
    "\n",
    "counts = df['oh_label'].value_counts()\n",
    "\n",
    "plt.pie(counts, labels =counts.index, startangle = 90, counterclock = False,\n",
    "        wedgeprops = {'width' : 0.6}, autopct='%1.1f%%', pctdistance = 0.7, \n",
    "        textprops = {'color': 'black', 'fontsize' : 18}, shadow = True,\n",
    "        colors = sns.color_palette(\"Paired\")[5:])\n",
    "\n",
    "\n",
    "plt.text(x = -0.25, y = 0, s = 'Total Text: {}'.format(df.shape[0]))\n",
    "plt.title('Text percentage chart in the Dataset :  1.0= Bullying | 0.0 = Non Bullying', fontsize = 16);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89464570",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b8f6b0a4",
   "metadata": {},
   "source": [
    "## Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "124c39af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>oh_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1010</th>\n",
       "      <td>RT @LiamDangerSmith: Call me sexist, but I rea...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8056</th>\n",
       "      <td>@semzyxx @owais00 Here's the trick. When she s...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9400</th>\n",
       "      <td>@MetroidThief @deathofrats01 his face is a bit...</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3235</th>\n",
       "      <td>Who else feels Karma is going to come back and...</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9475</th>\n",
       "      <td>Sorry, I'm not going to say GamerGate is the s...</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   Text  oh_label\n",
       "1010  RT @LiamDangerSmith: Call me sexist, but I rea...       1.0\n",
       "8056  @semzyxx @owais00 Here's the trick. When she s...       1.0\n",
       "9400  @MetroidThief @deathofrats01 his face is a bit...       0.0\n",
       "3235  Who else feels Karma is going to come back and...       0.0\n",
       "9475  Sorry, I'm not going to say GamerGate is the s...       0.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(columns=['index', 'id', 'Annotation'], axis=1, inplace= True) #drop unused columns\n",
    "\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5b47fee7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>oh_label</th>\n",
       "      <th>Tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1010</th>\n",
       "      <td>RT @LiamDangerSmith: Call me sexist, but I rea...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>liamdangersmith call sexist really like female...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8056</th>\n",
       "      <td>@semzyxx @owais00 Here's the trick. When she s...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>semzyxx owais trick say six year old mean six ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9400</th>\n",
       "      <td>@MetroidThief @deathofrats01 his face is a bit...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>metroidthief deathofrats face bit differently ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3235</th>\n",
       "      <td>Who else feels Karma is going to come back and...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>else feel karma going come back bite kat bum n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9475</th>\n",
       "      <td>Sorry, I'm not going to say GamerGate is the s...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>sorry going say gamergate isi shove donation a...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   Text  oh_label  \\\n",
       "1010  RT @LiamDangerSmith: Call me sexist, but I rea...       1.0   \n",
       "8056  @semzyxx @owais00 Here's the trick. When she s...       1.0   \n",
       "9400  @MetroidThief @deathofrats01 his face is a bit...       0.0   \n",
       "3235  Who else feels Karma is going to come back and...       0.0   \n",
       "9475  Sorry, I'm not going to say GamerGate is the s...       0.0   \n",
       "\n",
       "                                                  Tweet  \n",
       "1010  liamdangersmith call sexist really like female...  \n",
       "8056  semzyxx owais trick say six year old mean six ...  \n",
       "9400  metroidthief deathofrats face bit differently ...  \n",
       "3235  else feel karma going come back bite kat bum n...  \n",
       "9475  sorry going say gamergate isi shove donation a...  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Data pre-processing\n",
    "\n",
    "def p_tweet(text): #Define a funtion \"p_tweet\"\n",
    "    \n",
    "    row = re.sub(\"[^A-Za-z ]\", \" \", str(text)).lower() #Remove non alphabetic and change to lowercase\n",
    "    words = word_tokenize(row) #split sentence into word (Parsed text)\n",
    "    englishStops = set(stopwords.words('english')) #Setting English stopwords\n",
    "    characters= [\"''\",'``',\"rt\",\"https\",\"’\",\"“\",\"”\",\"\\u200b\",\"--\",\"n't\",\"'s\",\"...\",\"//t.c\", \"@\"] #set character for a removal\n",
    "    \n",
    "    \n",
    "    remove_words = [word for word in words if word not in englishStops and word not in characters]\n",
    "\n",
    "    \n",
    "    wordnet_lemmatizer = WordNetLemmatizer()\n",
    "    lemma_list = [wordnet_lemmatizer.lemmatize(word) for word in remove_words]\n",
    "\n",
    "    return \" \".join(lemma_list)\n",
    "\n",
    "df['Tweet'] = df['Text'].map(p_tweet)\n",
    "\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2955c794",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "73b623b7",
   "metadata": {},
   "source": [
    "##Splitting Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8562caa9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of dataset: 16851\n",
      "Total number of X_train data: 13480\n",
      "Total number of X_test data: 3371\n",
      "Total number of y_train data: 13480\n",
      "Total number of y_test data: 3371\n"
     ]
    }
   ],
   "source": [
    "X= df['Tweet']\n",
    "y= df['oh_label']\n",
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= .20, random_state= 42) #split into 80% train dataset\n",
    "\n",
    "print('Total number of dataset: {}'.format(df.shape[0]))\n",
    "print('Total number of X_train data: {}'.format(X_train.shape[0]))\n",
    "print('Total number of X_test data: {}'.format(X_test.shape[0]))\n",
    "print('Total number of y_train data: {}'.format(y_train.shape[0]))\n",
    "print('Total number of y_test data: {}'.format(y_test.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7acc4cbb",
   "metadata": {},
   "source": [
    "##Feature Extraction (Bag of Words)\n",
    "    1.    The Text colunm has already be parsed (tokenized)= Tweet column\n",
    "    2.    I encode the words in Tweet column as intergers/floats values.\n",
    "    3.    Because the encoded values will be used as inputs in machine learning algorithms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f533adb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13480\n",
      "3371\n"
     ]
    }
   ],
   "source": [
    "##encode the train data and set to arrary\n",
    "vectorize= CountVectorizer(max_features= 1000)\n",
    "\n",
    "X_train_data= vectorize.fit_transform(X_train).toarray() #fit the train data and return in matrix form(numpy arrary)\n",
    "X_test_data= vectorize.transform(X_test).toarray() #Transform test data and return in matrix form (numpy arrary)\n",
    "\n",
    "print(X_train_data.shape[0])\n",
    "print(X_test_data.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f0ae8622",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 1 1]\n",
      "[1 0 0]\n"
     ]
    }
   ],
   "source": [
    "encoder= preprocessing.LabelEncoder()\n",
    "\n",
    "y_train_data= encoder.fit_transform(y_train.values.tolist())\n",
    "y_test_data= encoder.transform(y_test.values.tolist())\n",
    "\n",
    "print(y_train_data[0:5])\n",
    "print(y_test_data[0:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08112bcd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ee2f81d2",
   "metadata": {},
   "source": [
    "## Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4667c8bc",
   "metadata": {},
   "source": [
    "## Support vector machine (SVM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "195ae667",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The evaluation result on test data :\n",
      "Accuracy : 84.0\n",
      "Precision : 0.81\n",
      "Recall : 0.63\n"
     ]
    }
   ],
   "source": [
    "#Svm classifier\n",
    "svm_clf= svm.SVC(probability=True, kernel= 'linear', decision_function_shape='ovo') #trains a classifier for each 2-pair class combination (ovo)\n",
    "\n",
    "#train the model\n",
    "svm_clf.fit(X_train_data, y_train_data)\n",
    "\n",
    "#predict the model on train and test data\n",
    "train_pred = svm_clf.predict(X_train_data)\n",
    "test_pred = svm_clf.predict(X_test_data)\n",
    "\n",
    "\n",
    "##Check for model performance/evaluation\n",
    "#Accuracy can be computed by comparing actual test set values(y_test_data) and predicted values (test_pred).\n",
    "\n",
    "#on test data\n",
    "test_accy = metrics.accuracy_score(y_test_data, test_pred)\n",
    "test_prec = metrics.precision_score(y_test_data, test_pred, average='binary')\n",
    "test_rec  = metrics.recall_score(y_test_data, test_pred, average='binary')\n",
    "\n",
    "#Print out all the results\n",
    "print (\"The evaluation result on test data :\")\n",
    "print (\"Accuracy :\", round(test_accy, 2) *100)\n",
    "print (\"Precision :\", round(test_prec ,2))\n",
    "print (\"Recall :\", round(test_rec, 2))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0e0d07d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The evaluation result on train data:\n",
      "Train_accuracy : 86.0\n",
      "Train_precision : 0.9\n",
      "Train_recall : 0.65\n"
     ]
    }
   ],
   "source": [
    "#I will also check on train data set and explain why later \n",
    "train_accy = metrics.accuracy_score(y_train_data, train_pred)\n",
    "#Because target is multiclass, i will change the average to macro\n",
    "train_prec = metrics.precision_score(y_train_data, train_pred, average= 'macro')\n",
    "train_rec  = metrics.recall_score(y_train_data, train_pred, average= 'macro')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print (\"The evaluation result on train data:\")\n",
    "print (\"Train_accuracy :\", round(train_accy, 2) *100)\n",
    "print (\"Train_precision :\", round(train_prec, 2))\n",
    "print (\"Train_recall :\", round(train_rec, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f41407a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "738afc63",
   "metadata": {},
   "source": [
    "## K-Nearest Neigbour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5b8bdbe9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "#Let get the best value for k\n",
    "neighbors = []\n",
    "cv_scores = []\n",
    "for k in range(1,10):\n",
    "    neighbors.append(k)\n",
    "    KNN = KNeighborsClassifier(n_neighbors = k)\n",
    "    scores = cross_val_score(KNN,X_train_data,y_train_data,cv=10, scoring = 'accuracy')\n",
    "    cv_scores.append(scores.mean())\n",
    "MSE = [1-x for x in cv_scores]\n",
    "K = neighbors[MSE.index(min(MSE))]\n",
    "print(K)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ab44423",
   "metadata": {},
   "source": [
    "**Interpreting K-value above**\n",
    "Using a cross validation of 10 folds, i found out that the best k value for this model is 5. This will enable a good fit line for the model.\n",
    "However, this is too low, but i will show us the reason behind this later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f9fb703f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The evaluation result on test data :\n",
      "Accuracy_2 : 76.0\n",
      "Precision_2 : 0.84\n",
      "Recall_2 : 0.28\n"
     ]
    }
   ],
   "source": [
    "#KNN Classifier\n",
    "KNN= KNeighborsClassifier(n_neighbors=k, p=2, metric='minkowski', algorithm='auto')\n",
    "\n",
    "#Fit the model\n",
    "KNN.fit(X_train_data, y_train_data)\n",
    "\n",
    "#predict the model on train and test data\n",
    "train_pred2 = KNN.predict(X_train_data)\n",
    "test_pred2 = KNN.predict(X_test_data)\n",
    "\n",
    "\n",
    "##Check for model performance/evaluation\n",
    "#Accuracy can be computed by comparing actual test set values(y_test_data) and predicted values (test_pred).\n",
    "\n",
    "#test data\n",
    "test_accy2 = metrics.accuracy_score(y_test_data, test_pred2)\n",
    "test_prec2 = metrics.precision_score(y_test_data, test_pred2, average='binary')\n",
    "test_rec2  = metrics.recall_score(y_test_data, test_pred2, average='binary')\n",
    "\n",
    "#Print out all the results\n",
    "print (\"The evaluation result on test data :\")\n",
    "print (\"Accuracy_2 :\", round(test_accy2, 2) *100)\n",
    "print (\"Precision_2 :\", round(test_prec2 ,2))\n",
    "print (\"Recall_2 :\", round(test_rec2, 2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0aac8d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The evaluation result on train data:\n",
      "Train_accuracy_2 : 78.0\n",
      "Train_precision_2 : 0.56\n",
      "Train_recall_2 : 0.45\n"
     ]
    }
   ],
   "source": [
    "#I will also check on train data set and explain why later \n",
    "train_accy2 = metrics.accuracy_score(y_train_data, train_pred2)\n",
    "#Because target is multiclass, i will change the average to macro\n",
    "train_prec2 = metrics.precision_score(y_train_data, train_pred2, average='macro')\n",
    "train_rec2  = metrics.recall_score(y_train_data, train_pred2, average='macro')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print (\"The evaluation result on train data:\")\n",
    "print (\"Train_accuracy_2 :\", round(train_accy2, 2) *100)\n",
    "print (\"Train_precision_2 :\", round(train_prec2, 2))\n",
    "print (\"Train_recall_2 :\", round(train_rec2, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e9b63fa0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Testing Accuracy')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the relationship between k and testing accuracy\n",
    "\n",
    "plt.plot(neighbors, cv_scores)\n",
    "plt.xlabel('Value of K, for KNN')\n",
    "plt.ylabel('Testing Accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1dc73000",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ffa1206d",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d19d1b1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The evaluation result on test data :\n",
      "Accuracy_3 : 81.0\n",
      "Precision_3 : 0.72\n",
      "Recall_3 : 0.65\n"
     ]
    }
   ],
   "source": [
    "#Random forest Classifier\n",
    "RFC= RandomForestClassifier()\n",
    "\n",
    "#Fit the model\n",
    "RFC.fit(X_train_data,y_train_data)\n",
    "\n",
    "\n",
    "#predict the model on train and test data\n",
    "train_pred3 = RFC.predict(X_train_data)\n",
    "test_pred3 = RFC.predict(X_test_data)\n",
    "\n",
    "\n",
    "##Check for model performance/evaluation\n",
    "#Accuracy can be computed by comparing actual test set values(y_test_data) and predicted values (test_pred).\n",
    "\n",
    "#test data\n",
    "test_accy3 = metrics.accuracy_score(y_test_data, test_pred3)\n",
    "test_prec3 = metrics.precision_score(y_test_data, test_pred3, average='binary')\n",
    "test_rec3  = metrics.recall_score(y_test_data, test_pred3, average='binary')\n",
    "\n",
    "#Print out all the results\n",
    "print (\"The evaluation result on test data :\")\n",
    "print (\"Accuracy_3 :\", round(test_accy3, 2) *100)\n",
    "print (\"Precision_3 :\", round(test_prec3 ,2))\n",
    "print (\"Recall_3 :\", round(test_rec3, 2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e5d53c17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The evaluation result on train data:\n",
      "Train_accuracy_3 : 99.0\n",
      "Train_precision_3 : 0.99\n",
      "Train_recall_3 : 0.77\n"
     ]
    }
   ],
   "source": [
    "#I will also check on train data set and explain why later \n",
    "train_accy3 = metrics.accuracy_score(y_train_data, train_pred3)\n",
    "#Because target is multiclass, i will change the average to macro\n",
    "train_prec3 = metrics.precision_score(y_train_data, train_pred3, average='macro')\n",
    "train_rec3  = metrics.recall_score(y_train_data, train_pred3, average='macro')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print (\"The evaluation result on train data:\")\n",
    "print (\"Train_accuracy_3 :\", round(train_accy3, 2) *100)\n",
    "print (\"Train_precision_3 :\", round(train_prec3, 2))\n",
    "print (\"Train_recall_3 :\", round(train_rec3, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35ce129d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c3f253a2",
   "metadata": {},
   "source": [
    "## NaiveBayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fa20f048",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The evaluation result on test data :\n",
      "Accuracy_4 : 55.00000000000001\n",
      "Precision_4 : 0.44\n",
      "Recall_4 : 0.43\n"
     ]
    }
   ],
   "source": [
    "#Naive Bayes classifier\n",
    "NBC= GaussianNB()\n",
    "\n",
    "#Fit the model\n",
    "NBC.fit(X_train_data,y_train_data)\n",
    "\n",
    "\n",
    "#predict the model on train and test data\n",
    "train_pred4 = NBC.predict(X_train_data)\n",
    "test_pred4 = NBC.predict(X_test_data)\n",
    "\n",
    "\n",
    "##Check for model performance/evaluation\n",
    "#Accuracy can be computed by comparing actual test set values(y_test_data) and predicted values (test_pred).\n",
    "\n",
    "#test data\n",
    "test_accy4 = metrics.accuracy_score(y_test_data, test_pred4)\n",
    "test_prec4 = metrics.precision_score(y_test_data, test_pred4, average= 'macro') \n",
    "test_rec4  = metrics.recall_score(y_test_data, test_pred4, average= 'macro')\n",
    "##average = 'binary': only report the result POS of the specified class_ label\n",
    "##average ='micro': will return the total ratio of tp/(tp + fp)\n",
    "##average = None: returns the score of each class. \n",
    "##average = 'macro' : the precision of each class is calculated first, and then the arithmetic average is calculated.\n",
    "\n",
    "#Print out all the results\n",
    "print (\"The evaluation result on test data :\")\n",
    "print (\"Accuracy_4 :\", round(test_accy4, 2) *100)\n",
    "print (\"Precision_4 :\", round(test_prec4 ,2))\n",
    "print (\"Recall_4 :\", round(test_rec4, 2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b74db27c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The evaluation result on train data:\n",
      "Train_accuracy_4 : 59.0\n",
      "Train_precision_4 : 0.46\n",
      "Train_recall_4 : 0.79\n"
     ]
    }
   ],
   "source": [
    "#I will also check on train data set and explain why later \n",
    "train_accy4 = metrics.accuracy_score(y_train_data, train_pred4)\n",
    "#Because target is multiclass, i will change the average to macro\n",
    "train_prec4 = metrics.precision_score(y_train_data, train_pred4, average='macro')\n",
    "train_rec4  = metrics.recall_score(y_train_data, train_pred4, average='macro')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print (\"The evaluation result on train data:\")\n",
    "print (\"Train_accuracy_4 :\", round(train_accy4, 2) *100)\n",
    "print (\"Train_precision_4 :\", round(train_prec4, 2))\n",
    "print (\"Train_recall_4 :\", round(train_rec4, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ea0e933",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5daba27b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a53bb7c2",
   "metadata": {},
   "source": [
    "## Model performance evaluation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "29199910",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Prediction probabilties\n",
    "\n",
    "r_Prob = [0 for _ in range(len(y_test_data))]\n",
    "svm_prob= svm_clf.predict_proba(X_test_data)\n",
    "knn_prob= KNN.predict_proba(X_test_data)\n",
    "rfc_prob= RFC.predict_proba(X_test_data)\n",
    "nbc_prob= NBC.predict_proba(X_test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "26f9089b",
   "metadata": {},
   "outputs": [],
   "source": [
    "svm_prob= svm_prob[:, 1] #Keeping probalities for positive outcome\n",
    "knn_prob= knn_prob[:, 1]\n",
    "rfc_prob= rfc_prob[:, 1]\n",
    "nbc_prob= nbc_prob[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "97f87863",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate the AUROC\n",
    "\n",
    "r_auc= roc_auc_score(y_test_data, r_Prob)\n",
    "svm_auc= roc_auc_score(y_test_data, svm_prob)\n",
    "knn_auc= roc_auc_score(y_test_data, knn_prob)\n",
    "rfc_auc= roc_auc_score(y_test_data, rfc_prob)\n",
    "nbc_auc= roc_auc_score(y_test_data, nbc_prob)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b39a304c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUROC for random prediction = 0.500\n",
      "AUROC for Support Vector machine = 0.867\n",
      "AUROC for k-Nearest Neighbour = 0.753\n",
      "AUROC for Random Forest Classifier = 0.854\n",
      "AUROC for Naive Bayes Classifier = 0.671\n"
     ]
    }
   ],
   "source": [
    "#AUROC SCORES\n",
    "\n",
    "print('AUROC for random prediction = %.3f' % (r_auc))\n",
    "print('AUROC for Support Vector machine = %.3f' % (svm_auc))\n",
    "print('AUROC for k-Nearest Neighbour = %.3f' % (knn_auc))\n",
    "print('AUROC for Random Forest Classifier = %.3f' % (rfc_auc))\n",
    "print('AUROC for Naive Bayes Classifier = %.3f' % (nbc_auc))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2152bb6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate ROC curve for False and True prediction\n",
    "\n",
    "r_Fpred, r_Tpred, _ = roc_curve(y_test_data, r_Prob)\n",
    "svm_Fpred, svm_Tpred, _ = roc_curve(y_test_data, svm_prob)\n",
    "knn_Fpred, knn_Tpred, _ = roc_curve(y_test_data, knn_prob)\n",
    "rfc_Fpred, rfc_Tpred, _ = roc_curve(y_test_data, rfc_prob)\n",
    "nbc_Fpred, nbc_Tpred, _ = roc_curve(y_test_data, nbc_prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5016b394",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting the ROC curve\n",
    "plt.plot(r_Fpred, r_Tpred, linestyle='--', label='Random prediction (AUROC = %0.3f)' % r_auc)\n",
    "plt.plot(svm_Fpred, svm_Tpred, marker='.', label=' Support Vector machine (AUROC = %0.3f)' % svm_auc)\n",
    "plt.plot(knn_Fpred, knn_Tpred, marker='.', label='k-Nearest Neighbour (AUROC = %0.3f)' % knn_auc)\n",
    "plt.plot(rfc_Fpred, rfc_Tpred, marker='.', label='Random Forest Classifier (AUROC = %0.3f)' % rfc_auc)\n",
    "plt.plot(nbc_Fpred, nbc_Tpred, marker='.', label='Naive Bayes Classifer (AUROC = %0.3f)' % nbc_auc)\n",
    "\n",
    "\n",
    "plt.title('ROC Plot')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.legend()  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f6a6ddf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
